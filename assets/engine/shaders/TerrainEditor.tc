#version 430

layout (vertices = 16) out;

uniform vec3 camera_pos;

const int AB = 2;
const int BC = 3;
const int CD = 0;
const int DA = 1;

const float tess_factor = 10000;
const float tess_slope = 1.8;
const float tess_shift = 0.0;


float lod_factor(float dist)
{
	return max(0.0, tess_factor / pow(dist, tess_slope) + tess_shift);
}

void main()
{
	if (gl_InvocationID == 0)
	{
		vec3 ab = vec3(gl_in[0].gl_Position + gl_in[3].gl_Position) / 2.0;
		vec3 bc = vec3(gl_in[3].gl_Position + gl_in[15].gl_Position) / 2.0;
		vec3 cd = vec3(gl_in[15].gl_Position + gl_in[12].gl_Position) / 2.0;
		vec3 da = vec3(gl_in[12].gl_Position + gl_in[0].gl_Position) / 2.0;
		
		float dist_ab = distance(ab, camera_pos);
		float dist_bc = distance(bc, camera_pos);
		float dist_cd = distance(cd, camera_pos);
		float dist_da = distance(da, camera_pos);
	
		gl_TessLevelOuter[AB] = mix(1, gl_MaxTessGenLevel, lod_factor(dist_ab));
		gl_TessLevelOuter[BC] = mix(1, gl_MaxTessGenLevel, lod_factor(dist_bc));
		gl_TessLevelOuter[CD] = mix(1, gl_MaxTessGenLevel, lod_factor(dist_cd));
		gl_TessLevelOuter[DA] = mix(1, gl_MaxTessGenLevel, lod_factor(dist_da));
		
		gl_TessLevelInner[0] = (gl_TessLevelOuter[BC] + gl_TessLevelOuter[DA]) / 2.0;
		gl_TessLevelInner[1] = (gl_TessLevelOuter[AB] + gl_TessLevelOuter[CD]) / 2.0;
	}
	
	gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
}